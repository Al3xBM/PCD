const TO_DO_TABLE = "todos";

class TodoManagerService {

    constructor(enclaveDB) {
        this.enclave = enclaveDB;
    }
    
    // could use .updateRecord instead. If a record with the same key already exists, it's updated, otherwise it creates a new one.
    // should still order the elements such that deleted items should be at the end
    createToDo(todo, callback) {
        this.listToDos((undef, res) => {console.log('res: '); console.log(res)});
        console.log(todo);

        // this.enclave.getAllRecords(TO_DO_TABLE, (undef, values) => {
        //     // values.forEach(value => console.log(value));
        //     for(let i = 0; i < values.length; ++i){
        //         console.log(values[i]);
        //         values[i].__deleted = false;
        //         console.log(values[i]);
        //         this.enclave.updateRecord(TO_DO_TABLE, values[i].input.name, values[i], () => {});
        //     }
        // });

        // this.enclave.getRecord(TO_DO_TABLE, todo.input.name, (err, res) => {
        //     console.log('getRecord err: ' + err);
        //     console.log('getRecord res: ' + res);

        //     if(err)
        //         return;

        //     if(res && !res.__deleted) {
        //         this.enclave.getAllRecords(TO_DO_TABLE, (undef, values) => {
        //             // values.forEach(value => console.log(value));
        //             for(let i = 0; i < values.length; ++i){
        //                 console.log(values[i]);
        //                 // values[i].__deleted = false;
        //                 // console.log(values[i]);
        //                 this.enclave.updateRecord(TO_DO_TABLE, values[i].input.name, values[i], () => {});

                        // if(values[i].__deleted && i < values.length - 1) {
                        //     console.log('reached index ' + i);

                        //     this.enclave.updateRecord(TO_DO_TABLE, values[i + 1].input.name, values[i], () => {});
                        //     this.enclave.updateRecord(TO_DO_TABLE, values[i].input.name, values[i + 1], () => {});
                        // }
        //             }
        //         });
        //     }
        // })
        // this.enclave.insertRecord(TO_DO_TABLE, todo.input.name, todo, callback);
    }

    removeToDo(todo, index, callback) {
        this.enclave.deleteRecord(TO_DO_TABLE, todo.input.name, callback);

        this.enclave.getAllRecords(TO_DO_TABLE, (undef, values) => {
            if(values.length - 1 <= index)
                return; 

            this.enclave.updateRecord(TO_DO_TABLE, values[index].input.name, values[index + 1], () => {});
            this.enclave.updateRecord(TO_DO_TABLE, values[index + 1].input.name, values[index], () => {});
            
            // values.forEach(value => console.log(value));
            // for(let i = 0; i < values.length; ++i){
            //     console.log(values[i]);
            //     // values[i].__deleted = false;
            //     // console.log(values[i]);
            //     this.enclave.updateRecord(TO_DO_TABLE, values[i].input.name, values[i], () => {});
    
            //     if(values[i].__deleted && i < values.length - 1) {
            //         console.log('reached index ' + i);
    
            //         this.enclave.updateRecord(TO_DO_TABLE, values[i + 1].input.name, values[i], () => {});
            //         this.enclave.updateRecord(TO_DO_TABLE, values[i].input.name, values[i + 1], () => {});
            //     }
            // }
        });

        this.enclave.getRecord(TO_DO_TABLE, todo.input.name, (err, res) => {
            console.log('getRecord err: ' + err);
            console.log('getRecord res: ' + res);
            
            if(err)
                return;
            
            if(res && !res.__deleted) {
                this.enclave.getAllRecords(TO_DO_TABLE, (undef, values) => {
                    // values.forEach(value => console.log(value));
                    for(let i = 0; i < values.length; ++i){
                        console.log(values[i]);
                        // values[i].__deleted = false;
                        // console.log(values[i]);
                        this.enclave.updateRecord(TO_DO_TABLE, values[i].input.name, values[i], () => {});
            
                        if(values[i].__deleted && i < values.length - 1) {
                            console.log('reached index ' + i);
            
                            this.enclave.updateRecord(TO_DO_TABLE, values[i + 1].input.name, values[i], () => {});
                            this.enclave.updateRecord(TO_DO_TABLE, values[i].input.name, values[i + 1], () => {});
                        }
                    }
                });
            }
        })
    }

    editToDo(todo, callback) {
        this.enclave.updateRecord(TO_DO_TABLE, todo.input.name, todo, callback);
    }

    listToDos(callback) {
        this.enclave.getAllRecords(TO_DO_TABLE, callback);
    }
}

let todoManagerService;
let getTodoManagerServiceInstance = function (controllerInstance, callback) {
    if (!todoManagerService) {
        controllerInstance.getMainEnclaveDB((err, enclave) => {
            if (err) {
                console.log('Could not get main enclave ', err);
                return callback(err);
            }
            todoManagerService = new TodoManagerService(enclave);
            return callback(todoManagerService)
        })

    } else {
        return callback(todoManagerService);
    }
}

export {
    getTodoManagerServiceInstance
};
